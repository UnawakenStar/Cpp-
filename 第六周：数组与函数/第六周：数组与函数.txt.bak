第六周：数组与函数

数据可以存放在变量里，每一个变量有一个名字，有一个类型，还有它的生存空间。
如果我们需要保存一些相同类型、相似含义、相同生存空间的数据，我们可以用数组来保存这些数据，
而不是用很多个独立的变量。数组是长度固定的数据结构，用来存放指定的类型的数据。
一个数组里可以有很多个数据，所有的数据的类型都是相同的。

数组：
int number[100];
scanf("%d",&number[i]);

若不判断cnt的大小是否小于100，会有安全隐患

定义数组
<类型>变量名称[元素数量];
int grades[100];
double weight[20];
元素数量必须是整数，

数组：
是一种容器，特点是：其中所有的元素具有相同的数据类型；
一旦创建，不能改变大小（数组中的元素在内存中是连续依次排列的）

int a[10]
一个int的数组：10个单元：a[0],a[1],...,a[9]
每个单元就是一个int的变量
可以在赋值的左边或者右边：
a[2] = a[1]+6; 在赋值左边叫做左值

数组的单元：
数组的每个单元就是数组类型的一个变量
使用数组时放在[]中的数字叫做下标或索引，下标从0开始计数：
grades[0]
grades[99]
average[5]

有效的下标范围：
编译器和运行环境都不会检查数组下标是否越界，无论是对数组单元做读还是写
一旦程序运行，越界的数组访问可能造成问题，导致程序崩溃
报错：segmentation fault
所以要保证程序只是用有效的下标值：[0,数组的大小-1]

长度为0：
int a[0];
可以存在，但是没用

“代码复制”是程序质量不良的表现――――>使用函数来避免代码复制

什么是函数？
函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值。
可以先想象成数学中的函数：y=f(x)

//函数头void //函数名sum(int begin, int end){//参数表
	int i;
	int sum = 0;
	for(i=begin;i<=end;i++){
		sum+=i;
	} 
	printf("%d到%d的和是%d\n",begin, end, sum);//函数体
}

在main方法中调用函数直接输入函数名即可

从函数中返回值：
return停止函数的执行，并送回一个值
return;
return表达式;

return不一定只有一个，但是不符合单一变量的原则

没有返回值的函数
void函数名（参数表）
不能使用带值的return也可以直接不写return
调用的时候不能做返回的赋值。

函数的参数与变量：
函数先后关系：例如在程序
#include<stdio.h>
void sum(int begin, int end){
	int i;
	int sum = 0;
	for(i=begin;i<=end;i++){
		sum+=i;
	} 
	printf("%d到%d的和是%d\n",begin, end, sum);
}

int main(void){
	sum(1,10);
	sum(20,30);
	sum(35,45);
	
	return 0;
}
中把sum()函数写在上面，是因为：C的编译器自上而下顺序分析代码

调用函数：如果函数有参数，调用函数时必须传递给它数量和类型正确的值
		可以传递给函数的值是表达式的结果，这包括：
		字面量、变量、函数的返回值、计算的结果。
		例如：
		int a,b,c;
		a = 5;
		b = 6;
		c = max(10,12);
		c = max(a,b);
		c = max(c,23);
		c = max(max(23,45),a);
		c = max(23+45,b);
*调用函数时给的值与参数的类型不匹配是C语言传统上最大的漏洞
*编译器会悄悄替你把类型转换好，但这很可能不是你想要的
*后续的C++/Java要求就很严格

传值：
*每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系。
*过去，对于函数参数表中的参数，叫做“形式参数”，调用函数时给的值，叫做“实际参数”
*由于易让初学者误会实际参数就是实际在函数中进行计算的参数，误会调用函数的时候把变量而不是值传进去了，不建议
继续用这种古老的方式称呼它们。
*它们是参数和值的关系。

变量的生存期和作用域：
生存期：什么时候这个变量开始出现了，什么时候它消亡了。
作用域：在代码的什么范围内可以访问这个变量（这个变量起作用）
对于本地变量，这两个问题的答案：大括号内――――――块
